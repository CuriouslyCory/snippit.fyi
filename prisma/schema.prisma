// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String               @id @default(cuid())
    name          String?
    email         String?              @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    prompts       Snipit[]
    interactions  SnipitInteractions[]
    Nope          Nope[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Snipit {
    id           Int                  @id @default(autoincrement())
    prompt       String               @db.VarChar(240)
    isPublic     Boolean
    createdBy    String
    dateCreated  DateTime             @default(now())
    creator      User                 @relation(fields: [createdBy], references: [id])
    numFollows   Int
    interactions SnipitInteractions[]
    tags         SnipitTag[]
    nopes        Nope[]
}

model SnipitInteractions {
    id          Int      @id @default(autoincrement())
    userId      String
    snipitId    Int
    numChecked  Int
    user        User     @relation(fields: [userId], references: [id])
    snipit      Snipit   @relation(fields: [snipitId], references: [id])
    lastChecked DateTime @default(now())

    @@unique([userId, snipitId])
}

model Nope {
    id        Int      @id @default(autoincrement())
    userId    String
    snipitId  Int
    snipit    Snipit   @relation(fields: [snipitId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@unique([userId, snipitId])
}

model Tag {
    id      Int         @id @default(autoincrement())
    name    String      @unique
    snipits SnipitTag[]
}

model SnipitTag {
    snipitId Int
    tagId    Int
    snipit   Snipit @relation(fields: [snipitId], references: [id])
    tag      Tag    @relation(fields: [tagId], references: [id])

    @@id([snipitId, tagId])
}
